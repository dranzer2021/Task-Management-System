openapi: 3.0.0
info:
  title: Task Management API
  version: 1.0.0
  description: API documentation for the Task Management System

servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [todo, in_progress, completed]
        priority:
          type: string
          enum: [low, medium, high]
        dueDate:
          type: string
          format: date-time
        assignedTo:
          type: string
        createdBy:
          type: string
        attachments:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              path:
                type: string
              mimetype:
                type: string
              size:
                type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        201:
          description: User registered successfully
        400:
          description: Invalid input data

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials

  /users:
    get:
      tags:
        - Users
      summary: Get all users (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: role
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: List of users
        401:
          description: Unauthorized
        403:
          description: Forbidden

    post:
      tags:
        - Users
      summary: Create a new user (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: priority
          schema:
            type: string
        - in: query
          name: assignedTo
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: sortBy
          schema:
            type: string
      responses:
        200:
          description: List of tasks
        401:
          description: Unauthorized

    post:
      tags:
        - Tasks
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                priority:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                assignedTo:
                  type: string
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        201:
          description: Task created successfully
        401:
          description: Unauthorized
        400:
          description: Invalid input data

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Task details
        404:
          description: Task not found

    put:
      tags:
        - Tasks
      summary: Update task
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                priority:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                assignedTo:
                  type: string
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                removeAttachments:
                  type: boolean
      responses:
        200:
          description: Task updated successfully
        404:
          description: Task not found

    delete:
      tags:
        - Tasks
      summary: Delete task
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Task deleted successfully
        404:
          description: Task not found

  /tasks/{id}/attachments/{attachmentId}:
    get:
      tags:
        - Tasks
      summary: Download task attachment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: attachmentId
          required: true
          schema:
            type: string
      responses:
        200:
          description: File download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        404:
          description: File not found 